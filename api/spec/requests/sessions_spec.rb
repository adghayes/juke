require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/sessions", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Session. As you add validations to Session, be sure to
  # adjust the attributes here as well.
  let(:user) { FactoryBot.create(:user, password: "password") }

  let(:valid_attributes) { { password: "password", email: user.email } }

  let(:invalid_attributes) { { password: "wrong_password", email: user.email } }

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Session" do
        expect {
          post session_url,
               params: { user: valid_attributes }, as: :json
        }.to change(Session, :count).by(1)
      end

      it "renders a JSON response with the new session" do
        post session_url,
             params: { user: valid_attributes }, as: :json
        expect(response).to have_http_status(:created)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Session" do
        expect {
          post session_url,
               params: { user: invalid_attributes }, as: :json
        }.to change(Session, :count).by(0)
      end

      it "renders a JSON response with errors for the new session" do
        post session_url,
             params: { user: invalid_attributes }, as: :json
        expect(response).to have_http_status(:unprocessable_entity)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested session" do
      user = FactoryBot.create(:user)
      session = Session.for(user)
      delete session_url, headers: { 'Authorization' => "bearer #{session.token}"}
      expect(session.reload.active).to be false
    end
  end
end
